buildscript {
    ext {
        kotlinVersion = '1.2.51'
        springBootVersion = '2.0.3.RELEASE'
        jooqVersion = '3.11.2'
        dokkaVersion = '0.9.17'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.dokka:dokka-gradle-plugin:${dokkaVersion}")
    }
}

plugins {
    id 'nu.studer.jooq' version '3.0.1'
    id 'org.flywaydb.flyway' version '5.1.4'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'nu.studer.jooq'
apply plugin: 'org.jetbrains.dokka'

group = 'com.opidis.ca.unit-of-work'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = "1.8"
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}

flyway {
    url = 'jdbc:postgresql://localhost/postgres'
    user = 'postgres'
    password = 'password'
    schemas = ['public']
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-webflux")
    compile("org.springframework.boot:spring-boot-starter-jooq:2.0.3.RELEASE")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin")
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    compile("org.junit.jupiter:junit-jupiter-api")
    compile("org.jooq:jooq:${jooqVersion}")
    compile("org.jooq:jooq-meta:${jooqVersion}")
    compile("org.jooq:jooq-codegen:${jooqVersion}")
    compile('org.postgresql:postgresql:42.2.3')

    runtime("org.springframework.boot:spring-boot-devtools")
    runtime("org.junit.jupiter:junit-jupiter-engine")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("io.projectreactor:reactor-test")
}

test {
    useJUnitPlatform {}
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}
