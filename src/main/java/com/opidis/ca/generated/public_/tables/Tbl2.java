/*
 * This file is generated by jOOQ.
 */
package com.opidis.ca.generated.public_.tables;


import com.opidis.ca.generated.public_.Indexes;
import com.opidis.ca.generated.public_.Keys;
import com.opidis.ca.generated.public_.Public;
import com.opidis.ca.generated.public_.tables.records.Tbl2Record;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tbl2 extends TableImpl<Tbl2Record> {

    private static final long serialVersionUID = 1921238747;

    /**
     * The reference instance of <code>public.tbl2</code>
     */
    public static final Tbl2 TBL2 = new Tbl2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Tbl2Record> getRecordType() {
        return Tbl2Record.class;
    }

    /**
     * The column <code>public.tbl2.id</code>.
     */
    public final TableField<Tbl2Record, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('tlb2_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.tbl2.foreign_name</code>.
     */
    public final TableField<Tbl2Record, String> FOREIGN_NAME = createField("foreign_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.tbl2</code> table reference
     */
    public Tbl2() {
        this(DSL.name("tbl2"), null);
    }

    /**
     * Create an aliased <code>public.tbl2</code> table reference
     */
    public Tbl2(String alias) {
        this(DSL.name(alias), TBL2);
    }

    /**
     * Create an aliased <code>public.tbl2</code> table reference
     */
    public Tbl2(Name alias) {
        this(alias, TBL2);
    }

    private Tbl2(Name alias, Table<Tbl2Record> aliased) {
        this(alias, aliased, null);
    }

    private Tbl2(Name alias, Table<Tbl2Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Tbl2(Table<O> child, ForeignKey<O, Tbl2Record> key) {
        super(child, key, TBL2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TLB2_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Tbl2Record, Integer> getIdentity() {
        return Keys.IDENTITY_TBL2;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Tbl2Record> getPrimaryKey() {
        return Keys.TLB2_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Tbl2Record>> getKeys() {
        return Arrays.<UniqueKey<Tbl2Record>>asList(Keys.TLB2_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tbl2 as(String alias) {
        return new Tbl2(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tbl2 as(Name alias) {
        return new Tbl2(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tbl2 rename(String name) {
        return new Tbl2(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tbl2 rename(Name name) {
        return new Tbl2(name, null);
    }
}
