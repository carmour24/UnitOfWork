/*
 * This file is generated by jOOQ.
 */
package com.opidis.ca.generated.information_schema.tables;


import com.opidis.ca.generated.information_schema.InformationSchema;
import com.opidis.ca.generated.information_schema.tables.records.TransformsRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transforms extends TableImpl<TransformsRecord> {

    private static final long serialVersionUID = -1915730390;

    /**
     * The reference instance of <code>information_schema.transforms</code>
     */
    public static final Transforms TRANSFORMS = new Transforms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransformsRecord> getRecordType() {
        return TransformsRecord.class;
    }

    /**
     * The column <code>information_schema.transforms.udt_catalog</code>.
     */
    public final TableField<TransformsRecord, String> UDT_CATALOG = createField("udt_catalog", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.transforms.udt_schema</code>.
     */
    public final TableField<TransformsRecord, String> UDT_SCHEMA = createField("udt_schema", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.transforms.udt_name</code>.
     */
    public final TableField<TransformsRecord, String> UDT_NAME = createField("udt_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.transforms.specific_catalog</code>.
     */
    public final TableField<TransformsRecord, String> SPECIFIC_CATALOG = createField("specific_catalog", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.transforms.specific_schema</code>.
     */
    public final TableField<TransformsRecord, String> SPECIFIC_SCHEMA = createField("specific_schema", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.transforms.specific_name</code>.
     */
    public final TableField<TransformsRecord, String> SPECIFIC_NAME = createField("specific_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.transforms.group_name</code>.
     */
    public final TableField<TransformsRecord, String> GROUP_NAME = createField("group_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.transforms.transform_type</code>.
     */
    public final TableField<TransformsRecord, String> TRANSFORM_TYPE = createField("transform_type", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>information_schema.transforms</code> table reference
     */
    public Transforms() {
        this(DSL.name("transforms"), null);
    }

    /**
     * Create an aliased <code>information_schema.transforms</code> table reference
     */
    public Transforms(String alias) {
        this(DSL.name(alias), TRANSFORMS);
    }

    /**
     * Create an aliased <code>information_schema.transforms</code> table reference
     */
    public Transforms(Name alias) {
        this(alias, TRANSFORMS);
    }

    private Transforms(Name alias, Table<TransformsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transforms(Name alias, Table<TransformsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Transforms(Table<O> child, ForeignKey<O, TransformsRecord> key) {
        super(child, key, TRANSFORMS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transforms as(String alias) {
        return new Transforms(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transforms as(Name alias) {
        return new Transforms(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transforms rename(String name) {
        return new Transforms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transforms rename(Name name) {
        return new Transforms(name, null);
    }
}
